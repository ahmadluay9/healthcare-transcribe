steps:
  # 1. Build the Docker image. Cloud Build will automatically use the Dockerfile
  #    in the root of your repository.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'asia-southeast2-docker.pkg.dev/${PROJECT_ID}/transcribe-medical/flask-app:${COMMIT_SHA}'
      - '-t'
      - 'asia-southeast2-docker.pkg.dev/${PROJECT_ID}/transcribe-medical/flask-app:latest'
      - '.'
    id: 'Build Docker Image'

  # 2. Deploy to Cloud Run. This step runs after the image is successfully built
  #    and pushed by Cloud Build (due to the 'images' block below).
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'troubleshooting-assistant' # The name of your Cloud Run service
      - '--image'
      - 'asia-southeast2-docker.pkg.dev/${PROJECT_ID}/transcribe-medical/flask-app:${COMMIT_SHA}'
      - '--region'
      - 'asia-southeast2'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      # '--port=8080' is not needed because Cloud Run defaults to 8080 and your Dockerfile uses the $PORT variable.
      - '--set-env-vars=PROJECT_ID=${PROJECT_ID}'
    id: 'Deploy to Cloud Run'

# The 'images' block tells Cloud Build to automatically push the built image
# to these locations upon a successful build. This replaces the need for
# explicit 'docker push' steps.
images:
  - 'asia-southeast2-docker.pkg.dev/${PROJECT_ID}/transcribe-medical/flask-app:${COMMIT_SHA}'
  - 'asia-southeast2-docker.pkg.dev/${PROJECT_ID}/transcribe-medical/flask-app:latest'

# Specify a machine type with more memory to prevent the build from failing.
options:
# Changed from E2_MEDIUM
  logging: CLOUD_LOGGING_ONLY

# Timeout for the build
timeout: '1200s' # 20 minutes